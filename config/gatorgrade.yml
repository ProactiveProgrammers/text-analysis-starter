setup: |
  cd textanalysis && poetry install
  echo "Done installing project dependencies!"
---

# --> check the Python program
- textanalysis/textanalysis/main.py:
  - description: Ensure that main.py file exists in the textanalysis/textanalysis/ directory
    check: ConfirmFileExists
  - description: Complete all TODOs, remove the TODO markers, and rewrite comments for main.py
    check: MatchFileFragment
    options:
      fragment: TODO
      count: 0
      exact: true
  - description: Ensure that the main.py file contains at least two 'Option(None)' parameters
    check: MatchFileFragment
    options:
      fragment: "Option(None)"
      count: 1
      exact: false
  - description: Create a sufficient number of docstring (i.e., multiple-line) comments in main.py
    check: CountMultipleLineComments
    options:
      language: "Python"
      count: 2
      exact: false
  - description: Create a sufficient number of single-line comments in main.py
    check: CountSingleLineComments
    options:
      language: "Python"
      count: 10
      exact: false

# --> check the Python program
- textanalysis/textanalysis/extract.py:
  - description: Ensure that extract.py file exists in the textanalysis/textanalysis/ directory
    check: ConfirmFileExists
  - description: Complete all TODOs, remove the TODO markers, and rewrite comments for extract.py
    check: MatchFileFragment
    options:
      fragment: TODO
      count: 0
      exact: true
  - description: Create a sufficient number of docstring (i.e., multiple-line) comments in extract.py
    check: CountMultipleLineComments
    options:
      language: "Python"
      count: 2
      exact: false
  - description: Create a sufficient number of single-line comments in extract.py
    check: CountSingleLineComments
    options:
      language: "Python"
      count: 10
      exact: false

# --> check the Python program
- textanalysis/textanalysis/visualize.py:
  - description: Ensure that visualize.py file exists in the textanalysis/textanalysis/ directory
    check: ConfirmFileExists
  - description: Complete all TODOs, remove the TODO markers, and rewrite comments for visualize.py
    check: MatchFileFragment
    options:
      fragment: TODO
      count: 0
      exact: true
  - description: Create a sufficient number of docstring (i.e., multiple-line) comments in visualize.py
    check: CountMultipleLineComments
    options:
      language: "Python"
      count: 2
      exact: false
  - description: Create a sufficient number of single-line comments in visualize.py
    check: CountSingleLineComments
    options:
      language: "Python"
      count: 5
      exact: false

# --> confirm the existence of a graphics file that the Python program generates
- textanalysis/graphics/set-visualization-generated.png:
  - description: "Confirm the existence of a graphics file generated by a Python program: generated file"
    check: ConfirmFileExists

# --> confirm the existence of a graphics file that the Python program generates
- textanalysis/graphics/set-visualization-generated.png:
  - description: "Confirm the existence of a graphics file generated by a Python program: manually created file"
    check: ConfirmFileExists

# --> confirm the existence of a text file that the Python program analyzes
- textanalysis/text/generated_one.txt:
  - description: "Confirm the existence of a text file suitable for analysis by a Python program: generated one"
    check: ConfirmFileExists

# --> confirm the existence of a text file that the Python program analyzes
- textanalysis/text/generated_two.txt:
  - description: "Confirm the existence of a text file suitable for analysis by a Python program: generated two"
    check: ConfirmFileExists

# --> confirm the existence of a text file that the Python program analyzes
- textanalysis/text/input_one.txt:
  - description: "Confirm the existence of a text file suitable for analysis by a Python program: input one"
    check: ConfirmFileExists

# --> confirm the existence of a text file that the Python program analyzes
- textanalysis/text/input_two.txt:
  - description: "Confirm the existence of a text file suitable for analysis by a Python program: input two"
    check: ConfirmFileExists

# run a command
- description: Pass the source code formatting checks run by black
  command: cd textanalysis && poetry run task black

# run a command
- description: Pass the linting checks run by flake8
  command: cd textanalysis && poetry run task flake8

# run a command
- description: Pass the import checks run by isort
  command: cd textanalysis && poetry run task isort

# run a command
- description: Pass the linting checks run by mypy
  command: cd textanalysis && poetry run task mypy

# run a command
- description: Pass the linting checks run by pydocstyle
  command: cd textanalysis && poetry run task pydocstyle

# run a command
- description: Pass the linting checks run by pylint
  command: cd textanalysis && poetry run task pylint

# run a command
- description: Pass the linting checks run by pymarkdown
  command: cd textanalysis && poetry run task markdownlint

# --> check the technical writing for various characteristics
- writing/reflection.md:
  - description: Ensure that the reflection.md file exists in the writing/ directory
    check: ConfirmFileExists
  - description: Complete all TODOs, remove the TODO markers, and rewrite comments for reflection.md
    check: MatchFileFragment
    options:
      fragment: TODO
      count: 0
      exact: true
  - description: Delete the 'Add Your Name Here' prompt in the reflection file
    check: MatchFileFragment
    options:
      fragment: "Add Your Name Here"
      count: 0
      exact: true
  - description: Write a minimum number of meaningful words in the reflection
    check: CountFileWords
    options:
      count: 500
      exact: false
  - description: Confirm that the markdown file has the correct number of headers
    check: CountMarkdownTags
    options:
      tag: heading
      count: 15
      exact: false
  - description: Confirm that the markdown file has the correct number of fenced code blocks
    check: CountMarkdownTags
    options:
      tag: code_block
      count: 6
      exact: false

# --> check that the number of commits in the Git repository is beyond a threshold
- description: Have at least a specific minimum of commits in repository
  check: CountCommits
  options:
    count: 10
